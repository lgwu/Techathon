<?xml version="1.0"?>
<project name="content platform" default="all" basedir="." xmlns="antlib:org.apache.tools.ant"
         xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- project path properties  -->
  

    <property name="dir.src" value="${basedir}/src/main/java"/>
    <property name="dir.resources" value="${basedir}/src/main/resources"/>
	<property name="dir.test.resources" value="${basedir}/src/unittest/resources"/>
   
    <property name="dir.lib" value="${basedir}/lib"/>
    <property name="dir.class" value="${basedir}/class"/>
    <property name="dir.instrumented" value="${dir.class}/instrumented"/>
    <property name="dir.dist" value="${basedir}/dist"/>
	<property name="dir.fulldist" value="${basedir}/fulldist"/>   
    <property name="jar.file" value="tnpoi.jar"/>
    <property name="exclusive.jars" value="**/hadoop*.jar, **/slf4j*.jar, **/commons-logging*.jar, **/*-sources.jar, **/*-javadoc.jar" />

    <!-- =================================================================== -->
    <!-- Print out usage information                                         -->
    <!-- =================================================================== -->

    <target name="help" description="Display detailed usage information">
        <echo>
            The major targets provided by this build file include...

            all                    : clean, compile, jar
            clean                  : remove everything generated as part of the build
            compile                : compile.generated.code, compile.src, compile.src.test
            generate.jaxb.src      : generates src files for TUF schema
            compile.generated.code : compile JAXB generated src
            compile.src            : build the source code
            compile.src.test       : build the test source code
            jar                    : package compiled classes into a jar, including dependencies
            jar.minimal            : package compiled classes into a jar, excluding dependencies
            help                   : print out this helpful little bit of text
            test                   : run unit tests
            instrument             : instrument code using Cobertura to generate coverage reports
            junit.report           : generate report of unit tests
            coverage.report        : generate coverage report
            test.report            : run tests and generate junit and coverage reports
        </echo>
    </target>

    <path id="classpath.main">
        <fileset dir="${dir.lib}">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement path="${dir.class}"/>
    </path>


	<target name="all" description="full build" depends="clean">
		  <antcall target="jar.full.nonextract"/> 
	</target>


    <uptodate property="ivy.check" srcfile="ivy.xml">
        <mapper type="merge" to="${basedir}/.ivyupdated"/>
    </uptodate>

    <target name="ivy.retrieve" description="ivy retrieve" unless="${ivy.check}" >
        <ivy:settings id="ivy.settings" file="${basedir}/ivysettings.xml"/>
        <ivy:retrieve pattern="${dir.lib}/[artifact]-[revision].[ext]" conf="build" file="ivy.xml"  settingsref="ivy.settings"/>
        <touch file="${basedir}/.ivyupdated" />
    </target>

    <!-- =================================================================== -->
    <!-- Delete all previously generated artifacts.                          -->
    <!-- =================================================================== -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${dir.dist}"/>
        <delete dir="${dir.class}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Set up directories for later steps                                  -->
    <!-- =================================================================== -->
    <target name="init"  depends="ivy.retrieve" description="create required directories">
        <mkdir dir="${dir.class}"/>  
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.lib}"/>
    
    </target>

    <!-- =================================================================== -->
    <!-- Compile all sources                                                 -->
    <!-- =================================================================== -->
    <target name="compile" depends="init" description="compile all source">       
        <antcall target="compile.src"/>       
    </target>
	
 




	<!-- =================================================================== -->
    <!-- Compiles src files                                                  -->
    <!-- =================================================================== -->
    <target name="compile.src" description="compile the source" unless="${compile.src.check}">
        <javac includeantruntime="false" debug="true" srcdir="${dir.src}" destdir="${dir.class}" sourcepath="" target="1.6" source="1.6"  encoding="UTF-8">
            <include name="**/*.java"/>
            <exclude name="**/*.xml"/>
            <exclude name="**/package-info*.*"/>
            <classpath refid="classpath.main"/>
        </javac>

        <copy toDir="${dir.class}/" failonerror="false">
            <fileset dir="${dir.resources}/config/">
             </fileset>
        </copy>
      
   
    </target>

    <!-- =================================================================== -->
    <!-- Compiles test source files                                          -->
    <!-- =================================================================== -->
    <target name="compile.test.src" description="compile the source">
        <javac includeantruntime="false" debug="true" srcdir="${dir.test.src}" destdir="${dir.class}" sourcepath="" target="1.6" source="1.6"  encoding="UTF-8">
            <classpath refid="classpath.main"/>
        	<compilerarg line="-encoding utf-8"/>
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Packages built files into a jar, alongwith dependent libraries      -->
    <!-- and config files                                                    -->
    <!-- =================================================================== -->
    <target name="jar.full.nonextract" depends="init,compile">
        <echo message="build full jar file"/>
        <copy toDir="${dir.class}/lib/">
            <fileset dir="${dir.lib}" includes="**/*jar" excludes="${exclusive.jars}"/>
        </copy>
        <jar destfile="${dir.dist}/lol.jar" filesetmanifest="mergewithoutmain">
            <fileset dir="${dir.class}"/>
            <fileset dir="${basedir}" includes="*.jar"/>
            <manifest>
                <attribute name="Main-Class" value="com.telenav.lol.workflow.main.Entry"/>
                <attribute name="Class-Path" value="."/>
            </manifest>
        </jar>
    </target>
	
	

   

   
 
</project>
